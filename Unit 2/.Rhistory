pt(4.417,df=19.low)
pt(4.417,df=19,lower.tail = FALSE)
library(swirl)
swirl()
2
sd(0.051,0.0505,0.049,0.0516,0.052,0.0508,0.0506)
x<- c(0.051,0.0505,0.049,0.0516,0.052,0.0508,0.0506)
x
sd(x)
pt(2.17,6)
1-pt(2.17,6)
rexp(2,1)
rexp(2,1)
rexp(2,1)
rexp(2,2)
?rexp
rexp(240,0.2)
rexp(40,0.2)
mean(rexp(40,0.2))
mean(rexp(40,0.2))
mean(rexp(40,0.2))
mean(rexp(400,0.2))
mean(rexp(400,0.2))
mean(rexp(4000,0.2))
mean(rexp(4000,0.2))
mean(rexp(4000,0.2))
mean(rexp(4000,0.2))
sd(rexp(4000,0.2))
sd(rexp(4000,0.2))
>
source("https://bioconductor.org/biocLite.R")
biocLite("ctsGE")
biocLite("ctsGE")
biocLite("ctsGE")
install.packages("C:/Users/woodyzc/Downloads/ctsGE_1.0.0.tar.gz", repos = NULL, type = "source")
biocLite("ctsGE")
install.packages("C:/Users/woodyzc/Downloads/ctsGE_1.0.0.tar.gz", repos = NULL, type = "source")
install.packages("ccaPP")
biocLite("limma")
install.packages("shiny")
install.packages("C:/Users/woodyzc/Downloads/ctsGE_1.0.0.tar.gz", repos = NULL, type = "source")
library(ctsGE)
biocLite("GEOquery")
library(GEOquery)
install.packages("C:/Users/woodyzc/Downloads/pandoc-1.19.2.1.tar.gz", repos = NULL, type = "source")
knit_with_parameters('~/R/Assignment/Statistic_inference__2.Rmd')
install.packages("arules")
install.packages("C:/Users/woodyzc/Downloads/arules_1.5-3.tar.gz", repos = NULL, type = "source")
install.packages("gridExtra")
# First I build the LM model with all the attributes
lm_model = lm(formula = Crime~., data = crime)
library(dplyr)
library(ggplot2)
library(outliers)
library(gridExtra)
crime = read.table(file = 'uscrime.txt', sep = '', header = T)
# arange the data in a descending manner
crime_desc = arrange(crime, desc(Crime))
# plot the data with boxpolt
p1 = ggplot(data = crime_desc, aes(x = '', y =Crime))+geom_boxplot()+xlab('Crime')
p2 = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity")+labs(x = 'Cities')
p3 = ggplot(data = crime_desc, aes(x =Crime))+
geom_histogram(aes(y=..density..), colour="black", fill="yellow", bins = 20)+
geom_vline(aes(xintercept=mean(Crime)), color = 'blue', size = 3)+
geom_density(color = 'red', fill="#FF6666", alpha = 0.2)
grid.arrange(p3, arrangeGrob(p1,p2, ncol =2),ncol=1)
qqnorm(scale(crime$Crime))
qqline(scale(crime$Crime))
lm_model = lm(formula = crime_desc~., data = crime)
# First I build the LM model with all the attributes
lm_model = lm(formula = Crime~., data = crime_desc)
summary(lm_model)
class(crime$So)
crime_desc$So = factor(crime_desc$So)
lm_model = lm(formula = Crime~., data = crime_desc)
summary(lm_model)
class(crime_desc$So)
outliers = c()
for (i in 1:length(crime_desc$Crime)){
if (i == 1){
result = grubbs.test(x = crime_desc$Crime, type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
}
else{
result = grubbs.test(x = crime_desc$Crime[-c(1:i-1)], type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
if ((result$p.value > 0.1)){
break
}
}
}
print (outliers)
p = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity",aes(fill = Crime<outliers[2]))+labs(x = 'cities')
p = p + scale_fill_manual(values = c('red','grey'))+ theme(legend.position="none")
p
#remove the outliers
crime_desc = crime_desc[-c(1,2),]
# First I build the LM model with all the attributes
crime_desc$So = factor(crime_desc$So)
lm_model = lm(formula = Crime~., data = crime_desc)
summary(lm_model)
View(crime)
View(crime_desc)
?lm
lm_model = lm(formula = Crime~., data = crime_desc, scale = T)
crime_desc = scale(crime_desc)
crime_desc = scale(crime_desc)
outliers = c()
for (i in 1:length(crime_desc$Crime)){
if (i == 1){
result = grubbs.test(x = crime_desc$Crime, type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
}
else{
result = grubbs.test(x = crime_desc$Crime[-c(1:i-1)], type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
if ((result$p.value > 0.1)){
break
}
}
}
print (outliers)
p = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity",aes(fill = Crime<outliers[2]))+labs(x = 'cities')
p = p + scale_fill_manual(values = c('red','grey'))+ theme(legend.position="none")
p
# First I build the LM model with all the attributes
crime_desc = scale(crime_desc)
library(dplyr)
library(ggplot2)
library(outliers)
library(gridExtra)
crime = read.table(file = 'uscrime.txt', sep = '', header = T)
# arange the data in a descending manner
crime_desc = arrange(crime, desc(Crime))
# plot the data with boxpolt
p1 = ggplot(data = crime_desc, aes(x = '', y =Crime))+geom_boxplot()+xlab('Crime')
p2 = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity")+labs(x = 'Cities')
p3 = ggplot(data = crime_desc, aes(x =Crime))+
geom_histogram(aes(y=..density..), colour="black", fill="yellow", bins = 20)+
geom_vline(aes(xintercept=mean(Crime)), color = 'blue', size = 3)+
geom_density(color = 'red', fill="#FF6666", alpha = 0.2)
grid.arrange(p3, arrangeGrob(p1,p2, ncol =2),ncol=1)
qqnorm(scale(crime$Crime))
qqline(scale(crime$Crime))
outliers = c()
for (i in 1:length(crime_desc$Crime)){
if (i == 1){
result = grubbs.test(x = crime_desc$Crime, type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
}
else{
result = grubbs.test(x = crime_desc$Crime[-c(1:i-1)], type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
if ((result$p.value > 0.1)){
break
}
}
}
print (outliers)
p = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity",aes(fill = Crime<outliers[2]))+labs(x = 'cities')
p = p + scale_fill_manual(values = c('red','grey'))+ theme(legend.position="none")
p
#remove the outliers
crime_desc = crime_desc[-c(1,2),]
# First I build the LM model with all the attributes
crime_desc = scale(crime_desc)
lm_model = lm(formula = Crime~., data = crime_desc)
View(crime_desc)
crime_desc = scale(crime_desc)%>%as.data.frame()
lm_model = lm(formula = Crime~., data = crime_desc)
summary(lm_model)
crime_desc$So = factor(crime_desc$So)
crime_desc = scale(crime_desc)
crime_desc$So = factor(crime_desc$So)
lm_model = lm(formula = Crime~., data = crime_desc)
summary(lm_model)
lm_model_1 = lm(Crime~Ed+Po1+Pop+Ineq+Prob, data = crime)
plot(x=crime_desc$Crime, y=lm_model_1$fitted.values)
anova(lm_model,lm_model_1)
lm_model_1 = lm(Crime~M+Ed+Po1+Ineq+U2+Prob, data = crime_desc)
lm_model = lm(formula = Crime~., data = crime_desc)
library(dplyr)
library(ggplot2)
library(outliers)
library(gridExtra)
crime = read.table(file = 'uscrime.txt', sep = '', header = T)
# arange the data in a descending manner
crime_desc = arrange(crime, desc(Crime))
# plot the data with boxpolt
p1 = ggplot(data = crime_desc, aes(x = '', y =Crime))+geom_boxplot()+xlab('Crime')
p2 = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity")+labs(x = 'Cities')
p3 = ggplot(data = crime_desc, aes(x =Crime))+
geom_histogram(aes(y=..density..), colour="black", fill="yellow", bins = 20)+
geom_vline(aes(xintercept=mean(Crime)), color = 'blue', size = 3)+
geom_density(color = 'red', fill="#FF6666", alpha = 0.2)
grid.arrange(p3, arrangeGrob(p1,p2, ncol =2),ncol=1)
qqnorm(scale(crime$Crime))
qqline(scale(crime$Crime))
result = grubbs.test(x = crime_desc$Crime, type = 10, opposite = FALSE)
print (result$alternative)
print (result$p.value)
result = grubbs.test(x = crime_desc$Crime, type = 10, opposite = TRUE)
print (result$alternative)
print (result$p.value)
outliers = c()
for (i in 1:length(crime_desc$Crime)){
if (i == 1){
result = grubbs.test(x = crime_desc$Crime, type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
}
else{
result = grubbs.test(x = crime_desc$Crime[-c(1:i-1)], type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
if ((result$p.value > 0.1)){
break
}
}
}
print (outliers)
p = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity",aes(fill = Crime<outliers[2]))+labs(x = 'cities')
p = p + scale_fill_manual(values = c('red','grey'))+ theme(legend.position="none")
p
#remove the outliers
crime_desc = crime_desc[-c(1,2),]
# First I build the LM model with all the attributes
lm_model = lm(formula = Crime~., data = crime_desc)
summary(lm_model)
plot(x=crime_desc$Crime, y=lm_model$fitted.values)
#newdata=data.frame(M = 14.0,So = 0,Ed = 10.0,Po1 = 12.0,Po2 = 15.5,LF = 0.640,M.F = 94.0,Pop = 150,NW = 1.1,U1 = 0.120,U2 = 3.6,Wealth = 3200,Ineq = 20.1,Prob = 0.04,Time = 39.0)
#predict(object = lm_model, newdata)
lm_model_1 = lm(Crime~M+Ed+Po1+Ineq+U2+Prob, data = crime_desc)
summary(lm_model_1)
plot(x=crime_desc$Crime, y=lm_model_1$fitted.values)
#predict(object = lm_model_1, newdata)
anova(lm_model,lm_model_1)
pi = c(.5,.25,.25)
pi
p = matrix(c(.75,.15,.1,.2,.4,.4,.4,.3,.3),nrow = 3,ncol = 3)
p
p = matrix(c(.75,.2,.4,.15,.4,.3,.1,.4,.3),nrow = 3,ncol = 3)
p
p^*^pi
p$*$pi
p&*&pi
p%*%pi
pi%*%p
?HoltWinters
library(glmnet)
?glmnet
pt(q = 1.96, 2)
pt(q = 2, 2)
pt(q = 20, 2)
pt(q = 1.975, 2)
qt(q = 0.25, 2)
qt(p = 0.05, 2)
qt(p = 0.025, 2)
qt(p = 0.025, 2,lower.tail = F)
qt(p = 0.29, 23)
pt(q = -1.084, 23)
pt(q = -1.084, 23)*2
?as.double
setwd("C:/Users/woodyzc/Desktop/OMS analytics/ISYE6414/Unit 2")
data_1 = read.table('meddcor.txt',header = F)
View(data_1)
model = lm(data_1$V1~., data = data_1)
summary(model)
model$model
model$effects
predict(data_1[,2:6], model, level='confidence')
predict(as.matrix(data_1[,2:6]), model, level='confidence')
predict(as.matrix(data_1[1,2:6]), model, level='confidence')
predict(data_1[1,2:6], model, level='confidence')
predict(newdata = data_1[1,2:6], model = model, level='confidence')
predict(object = model, data_1[1,2:6], level='confidence')
predict(object = model, data_1[,2:6], level='confidence')
predict(object = model, data_1[1,2:6], level='confidence')
predict(object = model, data_1[1,2:6], interval = ='confidence')
predict(object = model, data_1[1,2:6], interval  ='confidence')
install.packages("faraway")
library(faraway)
data("teengamb")
teengamb
View(teengamb)
library(faraway)
data("teengamb")
head(teengamb)
model = lm(gamble~., data = teengamb)
summary(model)
model$model
model$df.residual
model$residuals
model$R^2
model$coefficients
model$R
model$R-square
model$R-squared
summary(model)$
summary(model)$R-squared
summary(model)$r.squared
male = data.frame('sex' = as.factor(0))
female = data.frame('sex' = as.factor(1))
male
male = teengamb$sex==0
male = teengamb$sex=0
teengamb = data("teengamb")%>%tbl_df()
library(faraway)
library(dplyr)
teengamb = data("teengamb")%>%tbl_df()
male = mutate(teengamb, sex = as.factor(0))
female =  mutate(teengamb, sex = as.factor(1))
View(female)
library(faraway)
library(dplyr)
teengamb = data("teengamb")%>%tbl_df()
head(teengamb)
model = lm(gamble~., data = teengamb)
library(faraway)
library(dplyr)
teengamb = data("teengamb")%>%tbl_df()
head(teengamb)
model = lm(gamble~., data = teengamb)
library(faraway)
library(dplyr)
teengamb = data("teengamb")%>%tbl_df()
teengamb
data("teengamb")
teengamb
female =  mutate(teengamb, sex = as.factor(1))
View(female)
male = mutate(teengamb, sex = as.factor(0))
library(faraway)
library(dplyr)
teen_gam = data("teengamb")%>%tbl_df()
head(teen_gam)
model = lm(gamble~., data = teen_gam)
library(faraway)
library(dplyr)
teen_gam = data("teengamb")%>%tbl_df()
head(teen_gam)
class(teengamb)
male = mutate(teengamb, sex = as.factor(0))
View(male)
library(faraway)
library(dplyr)
head(teengamb)
model = lm(gamble~., data = teengamb)
summary(model)
setwd("C:/Users/woodyzc/Desktop/OMS analytics/ISYE6414/Unit 2")
fram = read.table('fram.csv')
View(fram)
fram = read.table('fram.csv',sep=',')
View(fram)
fram = read.table('fram.csv',sep=',', header = T)
View(fram)
fram = read.table('fram.csv',sep=',', header = T)
model = lm(fram$SYSBP~., data = fram)
fram = read.table('fram.csv',sep=',', header = T)
fram$SEX = as.factor(fram$SEX)
fram$CURSMOKE = as.factor(fram$CURSMOKE)
model = lm(fram$SYSBP~., data = fram)
fram = read.table('fram.csv',sep=',', header = T)
fram$SEX = as.factor(fram$SEX)
fram$CURSMOKE = as.factor(fram$CURSMOKE)
model = lm(fram$SYSBP~., data = fram)
summary(model)
View(fram)
fram = read.table('fram.csv',sep=',', header = T)
#fram$SEX = as.factor(fram$SEX)
#fram$CURSMOKE = as.factor(fram$CURSMOKE)
model = lm(fram$SYSBP~., data = fram)
summary(model)
class((fram$SEX))
fram$SEX = as.factor(fram$SEX)
class((fram$SEX))
fram = read.table('fram.csv',sep=',', header = T)
fram$SEX = as.factor(fram$SEX)
fram$CURSMOKE = as.factor(fram$CURSMOKE)
model = lm(fram$SYSBP~., data = fram)
summary(model)
model$terms
mode.sigma
sigma(model)
fram = read.table('fram.csv',sep=',', header = T)
fram$SEX = as.factor(fram$SEX)
fram$CURSMOKE = as.factor(fram$CURSMOKE)
fram = fram[fram$BMI>=30]
model = lm(fram$SYSBP~., data = fram)
summary(model)
fram = read.table('fram.csv',sep=',', header = T)
fram$SEX = as.factor(fram$SEX)
fram$CURSMOKE = as.factor(fram$CURSMOKE)
fram = fram[fram$BMI>=30,]
model = lm(fram$SYSBP~., data = fram)
summary(model)
View(fram)
fram = read.table('fram.csv',sep=',', header = T)
fram$SEX = as.factor(fram$SEX)
fram$CURSMOKE = as.factor(fram$CURSMOKE)
fram_1 = fram[fram$BMI>=30,]
model_1 = lm(fram_1$SYSBP~., data = fram_1)
model = lm(fram$SYSBP~., data = fram)
x = anova(mode, model_1)
summary(x)
fram = read.table('fram.csv',sep=',', header = T)
fram$SEX = as.factor(fram$SEX)
fram$CURSMOKE = as.factor(fram$CURSMOKE)
fram_1 = fram[fram$BMI>=30,]
model_1 = lm(fram_1$SYSBP~., data = fram_1)
model = lm(fram$SYSBP~., data = fram)
x = anova(model, model_1)
summary(x)
anova(model, model_1)
fram = read.table('fram.csv',sep=',', header = T)
fram$SEX = as.factor(fram$SEX)
fram$CURSMOKE = as.factor(fram$CURSMOKE)
fram_1 = fram[fram$BMI>=30,]
model_1 = lm(fram_1$SYSBP~., data = fram_1)
model = lm(fram$SYSBP~., data = fram)
x = anova(model_1, model)
summary(x)
x
fram = read.table('fram.csv',sep=',', header = T)
fram$SEX = as.factor(fram$SEX)
fram$CURSMOKE = as.factor(fram$CURSMOKE)
fram_1 = fram[fram$BMI>=30,]
model_1 = lm(fram_1$SYSBP~., data = fram_1)
model = lm(fram$SYSBP~., data = fram)
x = anova(model, model_1)
summary(x)
x
summary(model)$sigma^2
class(fram$SEX)
class(fram$CURSMOKE)
qqnorm(model$residuals)
qqline(model$residuals)
hist(model$residuals)
plot(fram[,1:5])
plot(fram[,1:2])
plot(fram[,1:3])
hist(model$residuals)
order(model$residuals)
order(model$residuals, decreasing = TRUE)
setwd("C:/Users/woodyzc/Desktop/OMS analytics/ISYE6414/Unit 2")
data = read.table("SATData.txt", header = TRUE)
reduced.line = lm(sat~takers + rank,data = data)
order.vec = order(reduced.line$res, decreasing = TRUE)
states = factor(data[order.vec, 1])
states
order.vec
newtable = data.frame(State = states, Residual = as.numeric(round(reduced.line$res[order.vec], 1)),
oldrank = (1:50)[order.vec])
newtable
View(data)
reduced.line = lm(sat~.,data = data)
## obtain the order of states by the residuals of the reduced model
order.vec = order(reduced.line$res, decreasing = TRUE)
## Re-order the states and create a table including state name, new and old order.
states = factor(data[order.vec, 1])
newtable = data.frame(State = states, Residual = as.numeric(round(reduced.line$res[order.vec], 1)),
oldrank = (1:50)[order.vec])
newtable
reduced.line$res
SAT = read.table("SATData.txt", header = TRUE)
plot(reduced.line$residuals, SAT$income)
View(newtable)
model = lm(sat~., data = SAT)
model$residuals
model$effects
model$rank
model$df.residual
model$coefficients
reduced.line = lm(sat~takers + + rank + income + years + public + expend,data = data)
## obtain the order of states by the residuals of the reduced model
order.vec = order(reduced.line$res, decreasing = TRUE)
## Re-order the states and create a table including state name, new and old order.
states = factor(data[order.vec, 1])
newtable = data.frame(State = states, Residual = as.numeric(round(reduced.line$res[order.vec], 1)),
oldrank = (1:50)[order.vec])
reduced.line$residuals
newtable
res = reduced.line$res
cook = cooks.distance(reduced.line)
par(mfrow = c(2,3))
plot(sat, res, xlab = "SAT Score", ylab = "Residuals", pch = 19)
abline(h = 0)
plot(takers, res, xlab = "Percent of Students Tested", ylab = "Residuals", pch = 19)
abline(h = 0)
plot(rank, res, xlab = "Median Class Ranking Percentile", ylab = "Residuals", pch = 19)
abline(h = 0)
hist(res, xlab="Residuals", main= "Histogram of Residuals")
qqnorm(res)
qqline(res)
plot(cook,type="h",lwd=3, ylab = "Cookâs Distance")
plot(SAT[,1:5])
plot(SAT[,2:8])
library(gridExtra)
