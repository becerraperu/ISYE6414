cyl4<- mtcars[mtcars$cyl==6]
cyl4<- mtcars$mpg[mtcars$cyl==6]
cyl4
cyl4<- mtcars[mtcars$cyl==6]
cyl4<- mtcars[mtcars$cyl==6,]
cyl4
cyl4<- mtcars$mpg[mtcars$cyl==6]
cyl4<- mtcars$mpg[mtcars$cyl==4]
cyl6<- mtcars$mpg[mtcars$cyl==6]
t.test(cyl4,cyl6,paired = FALSE,var.equal = FALSE)
pbinom(54,100,0.5,lower.tail = FALSE)
ppois(15800/30,520)
diff<- 1
sd<- 4/sqrt(1/100+1/100)
sd
sd<- 4*sqrt(1/100+1/100)
sd
diff/sd
pnorm(1.767767)
1-pnorm(1.767767)
(1-pnorm(1.767767))*2
cyl4<- mtcars$mpg[mtcars$cyl==6]
cyl6<- mtcars$mpg[mtcars$cyl==6]
cyl8<- mtcars$mpg[mtcars$cyl==8]
t.test(cyl6,cyl8,paired = FALSE,var.equal = TRUE)
mean(cyl6)-mean(cyl8)
sp<- sd(cyl6+cyl8)
se<-= sp/sqrt(1/length(cyl6)+1/length(cyl8))
se<- sp/sqrt(1/length(cyl6)+1/length(cyl8))
se
pnorm(4.642857/6.891828)
se<-= sp*sqrt(1/length(cyl6)+1/length(cyl8))
se<- sp*sqrt(1/length(cyl6)+1/length(cyl8))
se
pnorm(4.642857/1.476823)
pnorm(4.642857/1.476823,lower.tail = FALSE)
pt(4.417)
pt(4.417,dt=19)
pt(4.417,df=19)
pt(4.417,df=19.low)
pt(4.417,df=19,lower.tail = FALSE)
library(swirl)
swirl()
2
sd(0.051,0.0505,0.049,0.0516,0.052,0.0508,0.0506)
x<- c(0.051,0.0505,0.049,0.0516,0.052,0.0508,0.0506)
x
sd(x)
pt(2.17,6)
1-pt(2.17,6)
rexp(2,1)
rexp(2,1)
rexp(2,1)
rexp(2,2)
?rexp
rexp(240,0.2)
rexp(40,0.2)
mean(rexp(40,0.2))
mean(rexp(40,0.2))
mean(rexp(40,0.2))
mean(rexp(400,0.2))
mean(rexp(400,0.2))
mean(rexp(4000,0.2))
mean(rexp(4000,0.2))
mean(rexp(4000,0.2))
mean(rexp(4000,0.2))
sd(rexp(4000,0.2))
sd(rexp(4000,0.2))
>
source("https://bioconductor.org/biocLite.R")
biocLite("ctsGE")
biocLite("ctsGE")
biocLite("ctsGE")
install.packages("C:/Users/woodyzc/Downloads/ctsGE_1.0.0.tar.gz", repos = NULL, type = "source")
biocLite("ctsGE")
install.packages("C:/Users/woodyzc/Downloads/ctsGE_1.0.0.tar.gz", repos = NULL, type = "source")
install.packages("ccaPP")
biocLite("limma")
install.packages("shiny")
install.packages("C:/Users/woodyzc/Downloads/ctsGE_1.0.0.tar.gz", repos = NULL, type = "source")
library(ctsGE)
biocLite("GEOquery")
library(GEOquery)
install.packages("C:/Users/woodyzc/Downloads/pandoc-1.19.2.1.tar.gz", repos = NULL, type = "source")
knit_with_parameters('~/R/Assignment/Statistic_inference__2.Rmd')
install.packages("arules")
install.packages("C:/Users/woodyzc/Downloads/arules_1.5-3.tar.gz", repos = NULL, type = "source")
install.packages("gridExtra")
# First I build the LM model with all the attributes
lm_model = lm(formula = Crime~., data = crime)
library(dplyr)
library(ggplot2)
library(outliers)
library(gridExtra)
crime = read.table(file = 'uscrime.txt', sep = '', header = T)
# arange the data in a descending manner
crime_desc = arrange(crime, desc(Crime))
# plot the data with boxpolt
p1 = ggplot(data = crime_desc, aes(x = '', y =Crime))+geom_boxplot()+xlab('Crime')
p2 = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity")+labs(x = 'Cities')
p3 = ggplot(data = crime_desc, aes(x =Crime))+
geom_histogram(aes(y=..density..), colour="black", fill="yellow", bins = 20)+
geom_vline(aes(xintercept=mean(Crime)), color = 'blue', size = 3)+
geom_density(color = 'red', fill="#FF6666", alpha = 0.2)
grid.arrange(p3, arrangeGrob(p1,p2, ncol =2),ncol=1)
qqnorm(scale(crime$Crime))
qqline(scale(crime$Crime))
lm_model = lm(formula = crime_desc~., data = crime)
# First I build the LM model with all the attributes
lm_model = lm(formula = Crime~., data = crime_desc)
summary(lm_model)
class(crime$So)
crime_desc$So = factor(crime_desc$So)
lm_model = lm(formula = Crime~., data = crime_desc)
summary(lm_model)
class(crime_desc$So)
outliers = c()
for (i in 1:length(crime_desc$Crime)){
if (i == 1){
result = grubbs.test(x = crime_desc$Crime, type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
}
else{
result = grubbs.test(x = crime_desc$Crime[-c(1:i-1)], type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
if ((result$p.value > 0.1)){
break
}
}
}
print (outliers)
p = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity",aes(fill = Crime<outliers[2]))+labs(x = 'cities')
p = p + scale_fill_manual(values = c('red','grey'))+ theme(legend.position="none")
p
#remove the outliers
crime_desc = crime_desc[-c(1,2),]
# First I build the LM model with all the attributes
crime_desc$So = factor(crime_desc$So)
lm_model = lm(formula = Crime~., data = crime_desc)
summary(lm_model)
View(crime)
View(crime_desc)
?lm
lm_model = lm(formula = Crime~., data = crime_desc, scale = T)
crime_desc = scale(crime_desc)
crime_desc = scale(crime_desc)
outliers = c()
for (i in 1:length(crime_desc$Crime)){
if (i == 1){
result = grubbs.test(x = crime_desc$Crime, type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
}
else{
result = grubbs.test(x = crime_desc$Crime[-c(1:i-1)], type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
if ((result$p.value > 0.1)){
break
}
}
}
print (outliers)
p = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity",aes(fill = Crime<outliers[2]))+labs(x = 'cities')
p = p + scale_fill_manual(values = c('red','grey'))+ theme(legend.position="none")
p
# First I build the LM model with all the attributes
crime_desc = scale(crime_desc)
library(dplyr)
library(ggplot2)
library(outliers)
library(gridExtra)
crime = read.table(file = 'uscrime.txt', sep = '', header = T)
# arange the data in a descending manner
crime_desc = arrange(crime, desc(Crime))
# plot the data with boxpolt
p1 = ggplot(data = crime_desc, aes(x = '', y =Crime))+geom_boxplot()+xlab('Crime')
p2 = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity")+labs(x = 'Cities')
p3 = ggplot(data = crime_desc, aes(x =Crime))+
geom_histogram(aes(y=..density..), colour="black", fill="yellow", bins = 20)+
geom_vline(aes(xintercept=mean(Crime)), color = 'blue', size = 3)+
geom_density(color = 'red', fill="#FF6666", alpha = 0.2)
grid.arrange(p3, arrangeGrob(p1,p2, ncol =2),ncol=1)
qqnorm(scale(crime$Crime))
qqline(scale(crime$Crime))
outliers = c()
for (i in 1:length(crime_desc$Crime)){
if (i == 1){
result = grubbs.test(x = crime_desc$Crime, type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
}
else{
result = grubbs.test(x = crime_desc$Crime[-c(1:i-1)], type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
if ((result$p.value > 0.1)){
break
}
}
}
print (outliers)
p = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity",aes(fill = Crime<outliers[2]))+labs(x = 'cities')
p = p + scale_fill_manual(values = c('red','grey'))+ theme(legend.position="none")
p
#remove the outliers
crime_desc = crime_desc[-c(1,2),]
# First I build the LM model with all the attributes
crime_desc = scale(crime_desc)
lm_model = lm(formula = Crime~., data = crime_desc)
View(crime_desc)
crime_desc = scale(crime_desc)%>%as.data.frame()
lm_model = lm(formula = Crime~., data = crime_desc)
summary(lm_model)
crime_desc$So = factor(crime_desc$So)
crime_desc = scale(crime_desc)
crime_desc$So = factor(crime_desc$So)
lm_model = lm(formula = Crime~., data = crime_desc)
summary(lm_model)
lm_model_1 = lm(Crime~Ed+Po1+Pop+Ineq+Prob, data = crime)
plot(x=crime_desc$Crime, y=lm_model_1$fitted.values)
anova(lm_model,lm_model_1)
lm_model_1 = lm(Crime~M+Ed+Po1+Ineq+U2+Prob, data = crime_desc)
lm_model = lm(formula = Crime~., data = crime_desc)
library(dplyr)
library(ggplot2)
library(outliers)
library(gridExtra)
crime = read.table(file = 'uscrime.txt', sep = '', header = T)
# arange the data in a descending manner
crime_desc = arrange(crime, desc(Crime))
# plot the data with boxpolt
p1 = ggplot(data = crime_desc, aes(x = '', y =Crime))+geom_boxplot()+xlab('Crime')
p2 = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity")+labs(x = 'Cities')
p3 = ggplot(data = crime_desc, aes(x =Crime))+
geom_histogram(aes(y=..density..), colour="black", fill="yellow", bins = 20)+
geom_vline(aes(xintercept=mean(Crime)), color = 'blue', size = 3)+
geom_density(color = 'red', fill="#FF6666", alpha = 0.2)
grid.arrange(p3, arrangeGrob(p1,p2, ncol =2),ncol=1)
qqnorm(scale(crime$Crime))
qqline(scale(crime$Crime))
result = grubbs.test(x = crime_desc$Crime, type = 10, opposite = FALSE)
print (result$alternative)
print (result$p.value)
result = grubbs.test(x = crime_desc$Crime, type = 10, opposite = TRUE)
print (result$alternative)
print (result$p.value)
outliers = c()
for (i in 1:length(crime_desc$Crime)){
if (i == 1){
result = grubbs.test(x = crime_desc$Crime, type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
}
else{
result = grubbs.test(x = crime_desc$Crime[-c(1:i-1)], type = 10, opposite = F)
if (result$p.value < 0.1){
outliers = c(outliers,crime_desc$Crime[i])
}
if ((result$p.value > 0.1)){
break
}
}
}
print (outliers)
p = ggplot(data = crime_desc, aes(x = 1:47, y =Crime))+geom_bar(stat="identity",aes(fill = Crime<outliers[2]))+labs(x = 'cities')
p = p + scale_fill_manual(values = c('red','grey'))+ theme(legend.position="none")
p
#remove the outliers
crime_desc = crime_desc[-c(1,2),]
# First I build the LM model with all the attributes
lm_model = lm(formula = Crime~., data = crime_desc)
summary(lm_model)
plot(x=crime_desc$Crime, y=lm_model$fitted.values)
#newdata=data.frame(M = 14.0,So = 0,Ed = 10.0,Po1 = 12.0,Po2 = 15.5,LF = 0.640,M.F = 94.0,Pop = 150,NW = 1.1,U1 = 0.120,U2 = 3.6,Wealth = 3200,Ineq = 20.1,Prob = 0.04,Time = 39.0)
#predict(object = lm_model, newdata)
lm_model_1 = lm(Crime~M+Ed+Po1+Ineq+U2+Prob, data = crime_desc)
summary(lm_model_1)
plot(x=crime_desc$Crime, y=lm_model_1$fitted.values)
#predict(object = lm_model_1, newdata)
anova(lm_model,lm_model_1)
pi = c(.5,.25,.25)
pi
p = matrix(c(.75,.15,.1,.2,.4,.4,.4,.3,.3),nrow = 3,ncol = 3)
p
p = matrix(c(.75,.2,.4,.15,.4,.3,.1,.4,.3),nrow = 3,ncol = 3)
p
p^*^pi
p$*$pi
p&*&pi
p%*%pi
pi%*%p
?HoltWinters
library(glmnet)
?glmnet
pt(q = 1.96, 2)
pt(q = 2, 2)
pt(q = 20, 2)
pt(q = 1.975, 2)
qt(q = 0.25, 2)
qt(p = 0.05, 2)
qt(p = 0.025, 2)
qt(p = 0.025, 2,lower.tail = F)
qt(p = 0.29, 23)
pt(q = -1.084, 23)
pt(q = -1.084, 23)*2
library(ggplot2)
library(dplyr)
library(gridExtra)
affair = read.table('affair.csv',header = T, stringsAsFactors = F, sep = ',')%>%tbl_df()
class(affair$religious)
class(affair$occupation)
library(aod)
install.packages("aod")
library(aod)
?wald.test
method = glm(data = affair,nbaffairs~., family = 'poisson')
coef(method)
vcov(method)
?vcov
coef(method)
setwd("C:/Users/woodyzc/Desktop/OMS analytics/ISYE6414/Unit 4")
source('C:/Users/woodyzc/Downloads/PoissonReg.R')
awardsdata = within(awardsdata,
{
prog = factor(prog, levels=1:3, labels=c("General", "Academic", "Vocational"))
id = factor(id)
})
source('C:/Users/woodyzc/Downloads/PoissonReg.R')
summary(awardsdata)
#conditional histograms
library(ggplot2)
ggplot(awardsdata, aes(num_awards, fill = prog)) + geom_histogram(binwidth=.5, position="dodge")
# Fit a Stnadard Regression Model
m0 = lm(num_awards ~ prog + math, data=awardsdata)
## Peform Residual Analysis
res = m0$res
par(mfrow = c(2,2))
plot(awardsdata$math, res, xlab = "Math Exam Score", ylab = "Residuals", pch = 19)
abline(h = 0)
plot(fitted(m0), res, xlab = "Fitted Values", ylab = "Residuals", pch = 19)
abline(h = 0)
hist(res, xlab="Residuals", main= "Histogram of Residuals")
qqnorm(res)
qqline(res)
#poisson model
m1 = glm(num_awards ~ prog + math, family="poisson", data=awardsdata)
summary(m1)
# residual deviance test
with(m1, cbind(res.deviance = deviance, df = df.residual,
p = pchisq(deviance, df.residual, lower.tail=FALSE)))
## Residual Analysis
res = resid(m1,type="deviance")
par(mfrow=c(2,2))
plot(awardsdata$math,res,ylab="Std residuals",xlab="Math Exam")
abline(0,0,col="blue",lwd=2)
boxplot(res~prog,ylab = "Std residuals")
qqnorm(res, ylab="Std residuals")
qqline(res,col="blue",lwd=2)
hist(res,10,xlab="Std residuals", main="")
#poisson model with nonlinear modeling of math
library(mgcv)
m2 = gam(num_awards ~ prog + s(math), family="poisson", data=awardsdata)
# residual deviance test
with(m2, cbind(res.deviance = deviance, df = df.residual,
p = pchisq(deviance, df.residual, lower.tail=FALSE)))
#########################################################################
################## Second example: Insurance Data #######################
#########################################################################
library(MASS)
summary(Insurance)
Ins.dat = within(Insurance,
{
Age = factor(Age)
Group = factor(Group)
District = factor(District)
})
#par(mfrow=c(2,2))
boxplot(Claims/Holders~District, xlab = "District", ylab = "Rate of claims per policyholder",data=Insurance)
boxplot(Claims/Holders~Group, xlab = "Group", ylab = "Rate of claims per policyholder",data=Insurance)
boxplot(Claims/Holders~Age, xlab = "Age", ylab = "Rate of claims per policyholder",data=Insurance)
# poisson regression
m.ins = glm(Claims ~ District + Group + Age + offset(log(Holders)), data = Insurance, family = poisson)
summary(m.ins)
# test for overall regression
1-pchisq((236.26-51.42),(63-54))
# test for subsets of regression coefficients
## Is District significantly explanatory?
library(aod)
wald.test(b=coef(m.ins), Sigma=vcov(m.ins), Terms=2:4)
#residual deviance test
with(m.ins, cbind(res.deviance = deviance, df = df.residual, p = pchisq(deviance, df.residual, lower.tail=FALSE)))
## Residual Analysis
res = resid(m.ins,type="deviance")
par(mfrow=c(2,2))
boxplot(res~District,ylab = "Std residuals",data = Insurance)
boxplot(res~Age,ylab = "Std residuals",data = Insurance)
qqnorm(res, ylab="Std residuals")
qqline(res,col="blue",lwd=2)
hist(res,10,xlab="Std residuals", main="")
?resid
res
resid(m.ins)
x=resid(m.ins)
res==x
library(mgcv)
m2 = gam(num_awards ~ prog + s(math), family="poisson", data=awardsdata)
# residual deviance test
with(m2, cbind(res.deviance = deviance, df = df.residual,
p = pchisq(deviance, df.residual, lower.tail=FALSE)))
